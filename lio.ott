embed
{{ coq
Require Import SfLib.
}}

metavar termvar, x ::= {{ com term variable }} 
    {{ tex \mathit{[[termvar]]} }}
    {{ coq nat }} {{ coq-equality }}

metavar typvar, Y ::= {{ com type variable }} 
    {{ tex \mathit{[[typvar]]} }}
    {{ coq nat }} {{ coq-equality }}

metavar n ::= {{ com index count }} 
    {{ coq nat }} {{ coq-equality }}



grammar
b :: 'b_' ::= {{ com isexception }} {{ coq bool }} {{ coq-equality }}
    | noex :: :: noex {{ coq false }} {{ tex \_ }} {{ com noexception }}
    | ex :: :: ex {{ coq true }} {{ tex X }} {{ com exception }}

%{{{ LABELS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
l, c :: 'l_' ::= {{ com label }}
    | bot                   ::   :: LBot         {{ com bottom }} {{ tex \bot }}
    | A                     ::   :: LA           {{ com medium-label }} {{ tex l_[[A]] }}
    | B                     ::   :: LB           {{ com medium-label }} {{ tex l_[[B]] }}
    | top                   ::   :: LTop         {{ com top }} {{ tex \top }}
%}}} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%{{{ VALUES %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
v :: 'v_' ::= {{ com  value }}
    % ----------------------------------------------------------------------------------------------
    | bot                   ::   :: LBot         {{ com bottom }} {{ tex \bot }}
    | A                     ::   :: LA           {{ com medium-label }} {{ tex l_[[A]] }}
    | B                     ::   :: LB           {{ com medium-label }} {{ tex l_[[B]] }}
    | top                   ::   :: LTop         {{ com top }} {{ tex \top }}
    % ----------------------------------------------------------------------------------------------
    | true                  ::   :: VTrue        {{ com Boolean true }}
    | false                 ::   :: VFalse       {{ com Boolean false }}
    | ()                    ::   :: VUnit        {{ com unit value  }}
    | \ x . t               ::   :: VAbs         {{ com abstraction }}
    | LIO b t               ::   :: VLIO         {{ com LIO value }} 
                                                 {{ tex ([[t]])^{[[LIO]]_[[b]]} }}
    | Lb b t1 t2            ::   :: VLabeled     {{ com labeled value }} 
                                                 {{ tex [[Lb]]_[[b]]\ [[t1]]\ [[t2]] }}
    | X                     ::   :: VException   {{ com exception value }} {{ tex \varepsilon }}
%}}} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%{{{ TERMS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
t :: 't_' ::=  {{ com term }}
    % ----------------------------------------------------------------------------------------------
    | bot                   ::   :: LBot         {{ com bottom }} {{ tex \bot }}
    | A                     ::   :: LA           {{ com medium-label }} {{ tex l_[[A]] }}
    | B                     ::   :: LB           {{ com medium-label }} {{ tex l_[[B]] }}
    | top                   ::   :: LTop         {{ com top }} {{ tex \top }}
    % ----------------------------------------------------------------------------------------------
    | true                  ::   :: VTrue        {{ com Boolean true }}
    | false                 ::   :: VFalse       {{ com Boolean false }}
    | ()                    ::   :: VUnit        {{ com unit value  }}
    | \ x . t               ::   :: VAbs         {{ com abstraction }}
    | LIO b t               ::   :: VLIO         {{ com LIO value }} 
                                                 {{ tex ([[t]])^{[[LIO]]_[[b]]} }}
    | Lb b t1 t2            ::   :: VLabeled     {{ com labeled value }} 
                                                 {{ tex [[Lb]]_[[b]]\ [[t1]]\ [[t2]] }}
    | X                     ::   :: VException   {{ com exception value }} {{ tex \varepsilon }}
    | hole                  ::   :: VHole        {{ com hole }} {{ tex \bullet }}
    % ----------------------------------------------------------------------------------------------
    | x                     ::   :: Var          {{ com variable }}         
    | t t'                  ::   :: App          {{ com application }}      
    | fix t                 ::   :: Fix          {{ com fixpoint }}
    | if t1 then t2 else t3 ::   :: IfEl         {{ com conditional }}
    | join t1 t2            ::   :: Join         {{ com join }} {{ tex [[t1]] \sqcup [[t2]]}}
    | meet t1 t2            ::   :: Meet         {{ com meet }} {{ tex [[t1]] \sqcap [[t2]]}}
    | canFlowTo t1 t2       ::   :: CanFlowTo    {{ com can-flow-to }} 
                                                 {{ tex [[t1]] \sqsubseteq [[t2]]}}
    | return t              ::   :: Return       {{ com return }}
    | bind t t'             ::   :: Bind         {{ com bind }} {{ tex [[t]] >\!\!>\!\!= [[t']] }}
    | getLabel              ::   :: GetLabel     {{ com get current label }}
    | getClearance          ::   :: GetClearance {{ com get current clearance }}
    | labelOf t             ::   :: LabelOf      {{ com get label of value }}
    | label t t'            ::   :: Label        {{ com label }}
    | unlabel t             ::   :: UnLabel      {{ com unlabel }}
    | toLabeled t1 t2       ::   :: ToLabeled    {{ com execute sensitive computation }}
    | lowerClr t1           ::   :: LowerClr     {{ com lower clearance }}
    | throwLIO t            ::   :: ThrowLIO     {{ com throw exception }}
    | catchLIO t1 t2        ::   :: CatchLIO     {{ com catch exception }}
    | ( t )                 :: S :: paren        {{ ich [[t]] }}
    | { t / x } t'          :: M :: tsub         {{ ich ( tsubst_t [[t]] [[x]] [[t']] ) }}
%}}} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

m ::  'm_' ::= {{ com monadic LIO term }}
    | conf t1 t2 t3        ::    :: Config      {{ com configuration }}
                                                {{ tex \langle [[t1]], [[t2]], [[t3]] \rangle }}

%{{{ TYPES %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
T {{ tex \tau }} :: T_ ::= {{ com type }}
    | Bool                  ::   :: TBool        {{ com Boolean }}
    | ()                    ::   :: TUnit        {{ com unit }}
    | Label                 ::   :: TLabel       {{ com label }} {{ tex \ell }}
    | LIO T                 ::   :: TLIO         {{ com LIO action }} {{ tex [[LIO]] [[T]] }}
    | Labeled T             ::   :: TLabeled     {{ com labeled value }}
    | Exception             ::   :: TException   {{ com exception value }}
    | Y                     ::   :: TVar         {{ com variable }}
    | T -> T'               ::   :: TArrow       {{ com function }}
    | ( T )                 :: S :: paren        {{ ich [[T]] }}
%}}} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

G {{ tex \Gamma }} :: G_ ::= {{ com type environment }} {{ coq list (termvar*T) }}
    | G_empty               ::   :: em           {{ tex \emptyset }} {{ coq G_nil }}
    | G , x : T             ::   :: vn           {{ coq (cons ([[x]],[[T]]) [[G]]) }}

terminals :: 'terminals_' ::=
    | \                     ::   :: lambda       {{ tex \lambda }}
    | -->                   ::   :: lio_reduce   {{ tex \longrightarrow }}
    | -->*                  ::   :: lio_reduce_multi {{ tex \longrightarrow^* }}
    | ~>                    ::   :: pure_reduce  {{ tex \leadsto }}
    |  ->                   ::   :: arrow        {{ tex \rightarrow }}
    | |-                    ::   :: turnstile    {{ tex \vdash }}
    | <=                    ::   :: le           {{ tex \leq }}
    | in                    ::   :: in           {{ tex \in }}

formula :: 'formula_' ::=          
    | judgement             ::   :: judgement
    | not ( formula )       ::   :: not          {{ tex \neg ([[ formula]]) }}
                                                 {{ coq (not ([[formula]])) }}
    | t = t'                ::   :: eqv          {{ ich [[t]]=[[t']] }}
    | x : T in G            ::   :: xTG          {{ coq (bound [[x]] [[T]] [[G]])  }}
    | n = 0                 ::   :: eqvN0        {{ ich [[n]]=0 }}
    | n = n'                ::   :: eqvN         {{ ich [[n]]=[[n']] }}
    | n <= n'               ::   :: leN          {{ ich [[n]]<=[[n']] }}
    | n = succ n'           ::   :: succ         {{ ich [[n]]=[[n']]+1 }} {{ tex [[n]]=[[n']]+1 }}


embed
{{ coq
Notation G_nil := (@nil (termvar*T)).
Definition bound x T0 G :=
  exists G1, exists G2,
    (G = List.app G1 (List.cons (x,T0) G2)) /\
    ~In x (List.map (@fst termvar T) G1).
}}

subrules
  l <:: v
  v <:: t

freevars
  t x :: fv 

substitutions
  single t x :: tsubst 

defns
  Jtype :: '' ::= 

defn
    G |- t : T :: :: GtT :: GtT_ by

    ---------------- :: true
    G |- true : Bool

    ----------------- :: false
    G |- false : Bool

    ------------ :: unit
    G |- () : ()

    ---------------- :: labelBot
    G |- bot : Label

    ---------------- :: labelA
    G |- A : Label

    ---------------- :: labelB
    G |- B : Label

    ---------------- :: labelTop
    G |- top : Label

    G |- t1 : Label
    G |- t2 : T2
    -------------------------- :: labeledVal
    G |- Lb b t1 t2 : Labeled T2

    G |- t : T
    ------------------ :: lioVal
    G |- LIO b t : LIO T

    ------------------ :: exception
    G |- X : Exception
 
    ------------- :: hole
    G |- hole : T

    x : T in G
    ---------- :: valName
    G |- x : T

    G , x : T1  |- t : T2
    -------------------- :: abs
    G |- \x.t : T1 -> T2

    G |- t  : T1 -> T2
    G |- t1 : T1 
    -------------- :: app
    G |- t t1 : T2

    G |- t : T -> T
    --------------- :: fix
    G |- fix t : T

    G |- t1 : Bool
    G |- t2 : T
    G |- t3 : T
    ------------------------------ :: ifEl
    G |- if t1 then t2 else t3 : T

    G |- t2 : Label
    ----------------------- :: join
    G |- join t1 t2 : Label

    G |- t1 : Label
    G |- t2 : Label
    ----------------------- :: meet
    G |- meet t1 t2 : Label

    G |- t1 : Label
    G |- t2 : Label
    --------------------------- :: canFlowTo
    G |- canFlowTo t1 t2 : Bool

    G |- t : T
    --------------------- :: return
    G |- return t : LIO T

    G |- t  : LIO T1
    G |- t' : T1 -> LIO T2
    ----------------------- :: bind
    G |- bind t t' : LIO T2

    ------------------------- :: getLabel
    G |- getLabel : LIO Label

    ----------------------------- :: getClearance
    G |- getClearance : LIO Label

    G |- t : Labeled T
    ---------------------- :: labelOf
    G |- labelOf t : Label

    G |- t  : Label
    G |- t' : T
    --------------------------------- :: label
    G |- label t t' : LIO (Labeled T)

    G |- t : Labeled T
    ---------------------- :: unlabel
    G |- unlabel t : LIO T

    G |- t1 : Label
    G |- t2 : LIO T
    -------------------------------------- :: toLabeled
    G |- toLabeled t1 t2 : LIO (Labeled T)

		G |- t1 : Label
    ------------------------- :: lowerClr
    G |- lowerClr t1 : LIO ()

	G |- t : Exception
    ------------------------- :: throwLIO
    G |- throwLIO t : LIO T

	G |- t1 : LIO T 
	G |- t2 : Exception -> LIO T 
    ------------------------- :: catchLIO
    G |- catchLIO t1 t2 : LIO T

defns
  Jpop :: '' ::=

    defn
    t1 ~> t2 ::  :: pure_reduce :: Pr_  {{ com [[t1]] reduces to [[t2]] }} by 

    t1 ~> t1'
    --------------- :: appCtx
    t1 t2 ~> t1' t2

    -----------------------  :: app
    (\x.t1) t2 ~>  {t2/x}t1

    t ~> t'
    --------------- :: fixCtx
    fix t ~> fix t'

    ------------------------------- :: fix
    fix (\x.t) ~> {(fix (\x.t))/x}t
 
    t1 ~> t1'
    -----------------------------------------------  :: ifCtx
    if t1 then t2 else t3 ~> if t1' then t2 else t3

    -----------------------------  :: ifTrue
    if true then t2 else t3 ~> t2

    ------------------------------  :: ifFalse
    if false then t2 else t3 ~> t3

    t1 ~> t1'
    ------------------------- :: joinCtxL
    join t1 t2 ~> join t1' t2
    
    t2 ~> t2'
    ------------------------- :: joinCtxR
    join l1 t2 ~> join l1 t2'
    
    not (l = bot)
    --------------- :: joinBotL
    join bot l ~> l
    
    not (l = bot)
    --------------- :: joinBotR
    join l bot ~> l
    
    l1 = l2
    ---------------- :: joinEq
    join l1 l2 ~> l1
    
    --------------- :: joinAB
    join A B ~> top
    
    --------------- :: joinBA
    join B A ~> top
    
    not (l = top)
    ----------------- :: joinTopL
    join top l ~> top
    
    not (l = top)
    ----------------- :: joinTopR
    join l top ~> top
    
    t1 ~> t1'
    ------------------------- :: meetCtxL
    meet t1 t2 ~> meet t1' t2
    
    t2 ~> t2'
    ------------------------- :: meetCtxR
    meet l1 t2 ~> meet l1 t2'
    
    not (l = bot)
    ----------------- :: meetBotL
    meet bot l ~> bot
    
    not (l = bot)
    ----------------- :: meetBotR
    meet l bot ~> bot
    
    l1 = l2
    ---------------- :: meetEq
    meet l1 l2 ~> l1
    
    --------------- :: meetAB
    meet A B ~> bot
    
    --------------- :: meetBA
    meet B A ~> bot
    
    not (l = top)
    --------------- :: meetTopL
    meet top l ~> l
    
    not (l = top)
    --------------- :: meetTopR
    meet l top ~> l
    
    t1 ~> t1'
    ----------------------------------- :: canFlowToCtxL
    canFlowTo t1 t2 ~> canFlowTo t1' t2
    
    t2 ~> t2'
    ----------------------------------- :: canFlowToCtxR
    canFlowTo l1 t2 ~> canFlowTo l1 t2'
    
    not (l = bot)
    ----------------------- :: canFlowToBot
    canFlowTo bot l ~> true
    
    l1 = l2
    ----------------------- :: canFlowToEq
    canFlowTo l1 l2 ~> true
    
    ---------------------- :: canFlowToAB
    canFlowTo A B ~> false
    
    ---------------------- :: canFlowToBA
    canFlowTo B A ~> false
    
    not (l = top)
    ----------------------- :: canFlowToTop
    canFlowTo l top ~> true

    t ~> t'
    ----------------------- :: labelOfCtx
    labelOf t ~> labelOf t'

    ------------------------ :: labelOf
    labelOf (Lb b l1 t2) ~> l1

		------------ :: hole
 		hole ~> hole

defns
  Jop :: '' ::=

    defn
    m1 --> n m2 ::  :: lio_reduce :: LIO_       {{ com [[m1]] reduces to [[m2]] and executes [[n]] toLabeled-computations}} {{ tex [[m1]] \longrightarrow_[[n]] [[m2]] }} by

		n = 0
    -------------------------------------------------- :: return
    conf l c return t  --> n conf l c LIO noex t

    conf l c t1 -->* n conf l' c' LIO noex t1'
    ------------------------------------------------ :: bind
    conf l c bind t1 t2 --> n conf l' c' (t2 t1')

    conf l c t1 -->* n conf l' c' LIO ex t1'
    ------------------------------------------------ :: bindEx
    conf l c bind t1 t2 --> n conf l' c' throwLIO t1'

		n = 0
    ----------------------------------------- :: getLabel
    conf l c getLabel --> n conf l c return l

		n = 0
    --------------------------------------------- :: getClearance
    conf l c getClearance --> n conf l c return c

    t1 ~> t1'
		n = 0
    ------------------------------------------------ :: labelCtx
    conf l c label t1 t2 --> n conf l c label t1' t2

    canFlowTo l  l1 ~> true
    canFlowTo l1 c ~> true 
		n = 0
    -----------------------------------------------------  :: label
    conf l c label l1 t2 --> n conf l c return (Lb noex l1 t2)

    t ~> t'
		n = 0
    -------------------------------------------- :: unlabelCtx
    conf l c unlabel t --> n conf l c unlabel t'

    join l l1 ~> l2
    canFlowTo l2 c ~> true
		n = 0
    ----------------------------------------------------- :: unlabel
    conf l c unlabel (Lb noex l1 t2) --> n conf l2 c return t2

    join l l1 ~> l2
    canFlowTo l2 c ~> true
		n = 0
    ----------------------------------------------------- :: unlabelEx
    conf l c unlabel (Lb ex l1 t2) --> n conf l2 c throwLIO t2

		t1 ~> t1'
		n = 0
    ---------------------------------------------------------- :: toLabeledCtx
    conf l c toLabeled t1 t2 --> n conf l c toLabeled t1' t2

    canFlowTo l l1 ~> true
    canFlowTo l1 c ~> true
    conf l c t -->* n conf l' c' LIO noex t'
		n' = succ n
		canFlowTo l' l1 ~> true
    --------------------------------------------------- :: toLabeled
    conf l c toLabeled l1 t --> n' conf l c label l1 t'

    canFlowTo l l1 ~> true
    canFlowTo l1 c ~> true
    conf l c t -->* n conf l' c' LIO ex t'
		n' = succ n
		canFlowTo l' l1 ~> true
    --------------------------------------------------- :: toLabeledEx
    conf l c toLabeled l1 t --> n' conf l c return (Lb ex l t')

		t ~> t'
		n = 0
    ---------------------------------------------- :: lowerClrCtx
    conf l c lowerClr t --> n conf l c lowerClr t'

		n = 0
		canFlowTo l c1 ~> true
		canFlowTo c1 c ~> true
    ---------------------------------------------- :: lowerClr
    conf l c lowerClr c1 --> n conf l c1 return ()

                  n = 0
    ---------------------------------------------- :: throwLIO
    conf l c throwLIO t --> n conf l c LIO ex t

                  conf l c t1 -->* n conf l' c' LIO noex t1'
    -------------------------------------------------------- :: catchLIO
    conf l c catchLIO t1 t2 --> n conf l' c' return t1'

                  conf l c t1 -->* n conf l' c' LIO ex t1'
    -------------------------------------------------------- :: catchLIOEx
    conf l c catchLIO t1 t2 --> n conf l' c' (t2 t1')


    ------------------------------------- :: hole
    conf hole hole hole --> n conf hole hole hole

    defn
    m1 -->* n m2 ::  :: lio_reduce_multi :: LIO_  {{ com [[m1]] (big-step) reduces to [[m2]] executing [[n]] toLabeled-computations }} {{ tex [[m1]] \longrightarrow^*_[[n]] [[m2]] }} by

    conf l c t --> n conf l' c' t'
    ------------------------------- :: onestep
    conf l c t -->* n conf l' c' t'
		
    ---------------------------- :: done
    conf l c t -->* n conf l c t


embed
{{ coq
Hint Constructors pure_reduce lio_reduce GtT : rules.

Tactic Notation "label_cases" tactic(first) ident(c) :=
  first;
  [ Case_aux c "label_LBot"
  | Case_aux c "label_LA"
  | Case_aux c "label_LB"
  | Case_aux c "label_LTop" ].

Tactic Notation "value_cases" tactic(first) ident(c) :=
  first;
  [ Case_aux c "value_LBot"
  | Case_aux c "value_LA"
  | Case_aux c "value_LB"
  | Case_aux c "value_LTop"
  | Case_aux c "value_VTrue"
  | Case_aux c "value_VFalse"
  | Case_aux c "value_VUnit"
  | Case_aux c "value_VAbs"
  | Case_aux c "value_VLIO"
  | Case_aux c "value_VLabeled"
  | Case_aux c "value_VException" ].

Tactic Notation "term_cases" tactic(first) ident(c) :=
  first;
  [ Case_aux c "term_LBot"
  | Case_aux c "term_LA"
  | Case_aux c "term_LB"
  | Case_aux c "term_LTop"
  | Case_aux c "term_VTrue"
  | Case_aux c "term_VFalse"
  | Case_aux c "term_VUnit"
  | Case_aux c "term_VAbs"
  | Case_aux c "term_VLIO"
  | Case_aux c "term_VLabeled"
  | Case_aux c "term_VException"
  | Case_aux c "term_VHole"
  | Case_aux c "term_Var"
  | Case_aux c "term_App"
  | Case_aux c "term_Fix"
  | Case_aux c "term_IfEl"
  | Case_aux c "term_Join"
  | Case_aux c "term_Meet"
  | Case_aux c "term_CanFlowTo"
  | Case_aux c "term_Return"
  | Case_aux c "term_Bind"
  | Case_aux c "term_GetLabel"
  | Case_aux c "term_GetClearance"
  | Case_aux c "term_LabelOf"
  | Case_aux c "term_Label"
  | Case_aux c "term_UnLabel"
  | Case_aux c "term_ToLabeled"
  | Case_aux c "term_LowerClr"
  | Case_aux c "term_ThrowLIO"
  | Case_aux c "term_CatchLIO"
  ].

Tactic Notation "type_cases" tactic(first) ident(c) :=
  first;
  [ Case_aux c "GtT_true"
  | Case_aux c "GtT_false"
  | Case_aux c "GtT_unit"
  | Case_aux c "GtT_labelBot"
  | Case_aux c "GtT_labelA"
  | Case_aux c "GtT_labelB"
  | Case_aux c "GtT_labelTop"
  | Case_aux c "GtT_labeledVal"
  | Case_aux c "GtT_lioVal"
  | Case_aux c "GtT_exception"
  | Case_aux c "GtT_hole"
  | Case_aux c "GtT_valName"
  | Case_aux c "GtT_abs"
  | Case_aux c "GtT_fix"
  | Case_aux c "GtT_app"
  | Case_aux c "GtT_ifEl"
  | Case_aux c "GtT_join"
  | Case_aux c "GtT_meet"
  | Case_aux c "GtT_canFlowTo"
  | Case_aux c "GtT_return"
  | Case_aux c "GtT_bind"
  | Case_aux c "GtT_bindEx"
  | Case_aux c "GtT_getLabel"
  | Case_aux c "GtT_getClearance"
  | Case_aux c "GtT_labelOf"
  | Case_aux c "GtT_label"
  | Case_aux c "GtT_unlabel"
  | Case_aux c "GtT_throwLIO"
  | Case_aux c "GtT_catchLIO" ].

Tactic Notation "pure_reduce_cases" tactic(first) ident(c) :=
  first;
  [ Case_aux c "Pr_appCtx"
  | Case_aux c "Pr_app"
  | Case_aux c "Pr_fixCtx"
  | Case_aux c "Pr_fix"
  | Case_aux c "Pr_ifCtx"
  | Case_aux c "Pr_ifTrue"
  | Case_aux c "Pr_ifFalse"
  | Case_aux c "Pr_joinCtxL"
  | Case_aux c "Pr_joinCtxR"
  | Case_aux c "Pr_joinBotL"
  | Case_aux c "Pr_joinBotR"
  | Case_aux c "Pr_joinEq"
  | Case_aux c "Pr_joinAB"
  | Case_aux c "Pr_joinBA"
  | Case_aux c "Pr_joinTopL"
  | Case_aux c "Pr_joinTopR"
  | Case_aux c "Pr_meetCtxL"
  | Case_aux c "Pr_meetCtxR"
  | Case_aux c "Pr_meetBotL"
  | Case_aux c "Pr_meetBotR"
  | Case_aux c "Pr_meetEq"
  | Case_aux c "Pr_meetAB"
  | Case_aux c "Pr_meetBA"
  | Case_aux c "Pr_meetTopL"
  | Case_aux c "Pr_meetTopR"
  | Case_aux c "Pr_canFlowToCtxL"
  | Case_aux c "Pr_canFlowToCtxR"
  | Case_aux c "Pr_canFlowToBot"
  | Case_aux c "Pr_canFlowToEq"
  | Case_aux c "Pr_canFlowToAB"
  | Case_aux c "Pr_canFlowToBA"
  | Case_aux c "Pr_canFlowToTop"
  | Case_aux c "Pr_labelOfCtx"
  | Case_aux c "Pr_labelOf"
  | Case_aux c "Pr_hole" ].


Tactic Notation "lio_reduce_cases" tactic(first) ident(c) :=
 first;
  [ Case_aux c "LIO_return"
  | Case_aux c "LIO_bind"
  | Case_aux c "LIO_bindEx"
  | Case_aux c "LIO_getLabel"
  | Case_aux c "LIO_getClearance"
  | Case_aux c "LIO_labelCtx"
  | Case_aux c "LIO_label"
  | Case_aux c "LIO_unlabelCtx"
  | Case_aux c "LIO_unlabel"
  | Case_aux c "LIO_unlabelEx"
  | Case_aux c "LIO_toLabeledCtx"
  | Case_aux c "LIO_toLabeled"
  | Case_aux c "LIO_toLabeledEx"
  | Case_aux c "LIO_lowerClrCtx"
  | Case_aux c "LIO_lowerClr"
  | Case_aux c "LIO_throwLIO"
  | Case_aux c "LIO_catchLIO"
  | Case_aux c "LIO_catchLIOEx"
  | Case_aux c "LIO_hole"
  ].

Tactic Notation "lio_reduce_multi_cases" tactic(first) ident(c) :=
 first;
  [ Case_aux c "LIO_onestep"
  | Case_aux c "LIO_done"].

}}
